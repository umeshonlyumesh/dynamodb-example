private static void registerHelpers(Handlebars hb) {

  hb.registerHelper("req", (context, options) -> {
    String elem = options.param(0);
    Object value = options.param(1, null);
    if (elem == null || elem.isEmpty()) throw new IllegalArgumentException("elem name missing");
    if (value == null || value.toString().isBlank()) {
      throw new IllegalStateException("Required field '" + elem + "' is missing");
    }
    return "<eh:" + elem + ">" + escapeXml(value.toString()) + "</eh:" + elem + ">";
  });

  hb.registerHelper("text", (ctx, opts) -> ctx == null ? null : ctx.toString());

  hb.registerHelper("bool", (ctx, opts) -> {
    if (ctx == null) return null;
    if (ctx instanceof Boolean) return ctx;
    String s = ctx.toString().trim().toLowerCase(Locale.ROOT);
    if ("true".equals(s)) return true;
    if ("false".equals(s)) return false;
    throw new IllegalArgumentException("Boolean expected but got: " + ctx);
  });

  hb.registerHelper("dt", (ctx, opts) -> {
    if (ctx == null) return null;
    if (ctx instanceof java.time.OffsetDateTime odt)
      return odt.format(java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME);
    if (ctx instanceof java.time.ZonedDateTime zdt)
      return zdt.format(java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME);
    if (ctx instanceof java.time.LocalDateTime ldt)
      return ldt.atZone(java.time.ZoneOffset.UTC)
                .format(java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME);
    if (ctx instanceof java.time.Instant inst)
      return java.time.format.DateTimeFormatter.ISO_INSTANT.format(inst);
    return ctx.toString().trim(); // assume already ISO
  });

  // opt:
  //  - leaf:    {{opt "Elem" value}}
  //  - complex: {{opt "Elem" subtreeXml "complex"}}
  hb.registerHelper("opt", (context, options) -> {
    String elem = options.param(0);
    Object value = options.param(1, null);
    String mode = options.param(2, "leaf");
    if (elem == null || elem.isEmpty()) throw new IllegalArgumentException("elem name missing");

    if (value == null || value.toString().isBlank()) {
      return "<eh:" + elem + " xsi:nil=\"true\"/>";
    }
    if ("complex".equals(mode)) {
      return "<eh:" + elem + ">" + value + "</eh:" + elem + ">";
    }
    return "<eh:" + elem + ">" + escapeXml(value.toString()) + "</eh:" + elem + ">";
  });
}
