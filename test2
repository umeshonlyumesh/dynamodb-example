import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.util.ArrayList;
import java.util.List;

public class JsonCleaner {

    private static final ObjectMapper mapper = new ObjectMapper();

    public static JsonNode clean(JsonNode node) {
        if (node == null || node.isNull()) {
            return null;
        }

        if (node.isObject()) {
            ObjectNode obj = (ObjectNode) node;

            // Collect keys to remove in a separate list
            List<String> keysToRemove = new ArrayList<>();
            var it = obj.fieldNames();
            while (it.hasNext()) {
                String key = it.next();
                JsonNode child = clean(obj.get(key));
                if (child == null ||
                    child.isNull() ||
                    (child.isObject() && child.isEmpty()) ||
                    (child.isArray() && child.isEmpty()) ||
                    (child.isTextual() && child.asText().isBlank())) {
                    keysToRemove.add(key);
                } else {
                    obj.set(key, child);
                }
            }

            // Remove keys after iteration
            obj.remove(keysToRemove);

            return obj.isEmpty() ? null : obj;
        }

        if (node.isArray()) {
            ArrayNode arr = (ArrayNode) node;
            for (int i = arr.size() - 1; i >= 0; i--) {
                JsonNode cleaned = clean(arr.get(i));
                if (cleaned == null ||
                    cleaned.isNull() ||
                    (cleaned.isObject() && cleaned.isEmpty()) ||
                    (cleaned.isArray() && cleaned.isEmpty()) ||
                    (cleaned.isTextual() && cleaned.asText().isBlank())) {
                    arr.remove(i);
                } else {
                    arr.set(i, cleaned);
                }
            }
            return arr.isEmpty() ? null : arr;
        }

        return node;
    }

    public static String cleanRenderedJson(String renderedJson) throws Exception {
        JsonNode tree = mapper.readTree(renderedJson);
        JsonNode cleaned = clean(tree);
        return cleaned == null ? "{}" : mapper.writeValueAsString(cleaned);
    }
}
