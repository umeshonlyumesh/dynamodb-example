package com.fraudsdk.controller;




import com.fraudsdk.stub.*;
import javax.xml.bind.JAXBElement;
import org.springframework.stereotype.Component;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

@Component
public class EhRequestBuilder {

    private final ObjectFactory of = new ObjectFactory();

    public TFWSEvaluateGenericV2GenericType buildGeneric() throws Exception {
        TFWSEvaluateGenericV2GenericType g = new TFWSEvaluateGenericV2GenericType();


            IFMAccountReferenceTypeV4 acct = new IFMAccountReferenceTypeV4();
            set(acct::setAccountName, of.createIFMAccountReferenceTypeV4AccountName("umesh"));
            set(acct::setIsEmployeeOwned, of.createIFMAccountReferenceTypeV4IsEmployeeOwned(true));
            g.setAccountReference(of.createTFWSEvaluateGenericV2GenericTypeAccountReference(acct));



        return g;
    }

    // --------- small helpers to keep code tidy ----------

    @FunctionalInterface
    private interface Setter<T> { void set(T v); }

    private <T> void set(java.util.function.Consumer<JAXBElement<T>> setter, JAXBElement<T> value) {
        if (value != null && value.getValue() != null) setter.accept(value);
    }

    private boolean notBlank(String s) { return s != null && !s.isBlank(); }

    private XMLGregorianCalendar xgc(OffsetDateTime odt) throws Exception {
        return DatatypeFactory.newInstance()
                .newXMLGregorianCalendar(odt.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));
    }
}
