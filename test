package com.example.eh.config;

import com.example.eh.gen.EventHandlerService;
import com.example.eh.gen.EHProxy;
import jakarta.xml.ws.BindingProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Map;

@Configuration
public class SoapClientConfig {

  @Value("${eh.endpoint}")
  private String endpoint;

  @Value("${eh.connectTimeoutMs:10000}")
  private int connectTimeoutMs;

  @Value("${eh.readTimeoutMs:30000}")
  private int readTimeoutMs;

  @Bean
  public EHProxy ehPort() {
    EventHandlerService svc = new EventHandlerService();
    EHProxy port = svc.getEventHandlerServiceHttpPort();

    Map<String, Object> ctx = ((BindingProvider) port).getRequestContext();
    ctx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpoint);

    // JAX-WS standard & vendor timeouts
    ctx.put("com.sun.xml.ws.connect.timeout", connectTimeoutMs);
    ctx.put("com.sun.xml.ws.request.timeout", readTimeoutMs);
    ctx.put("com.sun.xml.internal.ws.connect.timeout", connectTimeoutMs);
    ctx.put("com.sun.xml.internal.ws.request.timeout", readTimeoutMs);

    return port;
  }
}

========================================================
package com.example.eh.api;

import jakarta.validation.constraints.NotBlank;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

public record EvaluateIn(
    @NotBlank String operationKey,
    String transactionKey,
    String transactionType,
    OffsetDateTime transactionDateTime,
    String accountName,
    Boolean isEmployeeOwned,
    BigDecimal amountOriginal,
    String amountCurrency,
    String partyName,
    String taxId,
    String ipAddress
) {}

=====================================

package com.example.eh.api;

import jakarta.validation.constraints.NotBlank;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

public record EvaluateIn(
    @NotBlank String operationKey,
    String transactionKey,
    String transactionType,
    OffsetDateTime transactionDateTime,
    String accountName,
    Boolean isEmployeeOwned,
    BigDecimal amountOriginal,
    String amountCurrency,
    String partyName,
    String taxId,
    String ipAddress
) {}

===========================
package com.example.eh.api;

public record EvaluateOut(
    Integer returnCode,
    String message,
    String additionalData,
    Boolean isAlertGenerated,
    String modelScoreCd,
    String transactionKey,
    String operationKey,
    String rawSoapBody // optional: for diagnostics; drop in prod if not needed
) {}


======================

package com.example.eh.api;

import com.example.eh.service.EvaluateService;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/eh")
public class EvaluateController {

  private final EvaluateService service;

  public EvaluateController(EvaluateService service) {
    this.service = service;
  }

  @PostMapping("/evaluate")
  public ResponseEntity<EvaluateOut> evaluate(@Valid @RequestBody EvaluateIn in) {
    return ResponseEntity.ok(service.evaluate(in));
  }
}

===========
package com.example.eh.service;

import com.example.eh.api.EvaluateIn;
import com.example.eh.api.EvaluateOut;
import com.example.eh.gen.EHResult;
import com.example.eh.gen.EHProxy;
import com.example.eh.gen.FFWSEvaluateGenericV22;
import com.example.eh.gen.FFWSEvaluateGenericV22Response;
import com.example.eh.gen.FFWSEvaluateGenericV22CustomOutTupleType;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.ws.soap.SOAPFaultException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class EvaluateService {
  private static final Logger log = LoggerFactory.getLogger(EvaluateService.class);

  private final EHProxy port;
  private final EhRequestBuilder builder;
  private final SoapResponseReader reader;

  public EvaluateService(EHProxy port, EhRequestBuilder builder, SoapResponseReader reader) {
    this.port = port;
    this.builder = builder;
    this.reader = reader;
  }

  public EvaluateOut evaluate(EvaluateIn in) {
    try {
      FFWSEvaluateGenericV22 req = new FFWSEvaluateGenericV22();
      req.setGeneric(builder.buildGeneric(in));   // <- all JAXBElement prep hidden here

      FFWSEvaluateGenericV22Response resp = port.ffWSEvaluateGenericV22(req);

      // Map to DTO
      EHResult r = resp.getFFWSEvaluateGenericV22Return();
      FFWSEvaluateGenericV22CustomOutTupleType co = resp.getCustomOut();

      Integer rc = r != null && r.getReturnCode()!=null ? r.getReturnCode().getValue() : null;
      String msg = reader.get(r != null ? r.getMessage() : null);
      String add = reader.get(r != null ? r.getAdditionalData() : null);

      Boolean alert = reader.getBool(co != null ? co.getIsAlertGenerated() : null);
      String model = reader.get(co != null ? co.getModelScoreCd() : null);
      String txKey = reader.get(co != null ? co.getTransactionKey() : null);
      String opKey = reader.get(co != null ? co.getOperationKey() : null);

      String raw = reader.rawBodyIfAvailable(resp); // optional

      return new EvaluateOut(rc, msg, add, alert, model, txKey, opKey, raw);

    } catch (SOAPFaultException sfe) {
      log.warn("SOAP Fault: {}", sfe.getFault().getFaultString(), sfe);
      throw new SoapClientException("Upstream SOAP fault: " + sfe.getFault().getFaultString(), 502, sfe);
    } catch (Exception e) {
      log.error("SOAP call failed", e);
      throw new SoapClientException("SOAP call failed", 502, e);
    }
  }
}

==============
package com.example.eh.service;

import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;

public class SoapClientException extends ResponseStatusException {
  public SoapClientException(String reason, int httpStatus, Throwable cause) {
    super(HttpStatus.valueOf(httpStatus), reason, cause);
  }
}
========================
package com.example.eh.service;

import com.example.eh.api.EvaluateIn;
import com.example.eh.gen.*;
import jakarta.xml.bind.JAXBElement;
import org.springframework.stereotype.Component;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

@Component
public class EhRequestBuilder {

  private final ObjectFactory of = new ObjectFactory();

  public FFWSEvaluateGenericV22GenericTupleType buildGeneric(EvaluateIn in) throws Exception {
    FFWSEvaluateGenericV22GenericTupleType g = new FFWSEvaluateGenericV22GenericTupleType();

    // accountReference
    if (notBlank(in.accountName()) || in.isEmployeeOwned()!=null) {
      IFMAccountReferenceTypeV4 acct = new IFMAccountReferenceTypeV4();
      set(acct::setAccountName, of.createIFMAccountReferenceTypeV4AccountName(in.accountName()));
      set(acct::setIsEmployeeOwned, of.createIFMAccountReferenceTypeV4IsEmployeeOwned(in.isEmployeeOwned()));
      g.setAccountReference(of.createTFWSEvaluateGenericV2GenericTypeAccountReference(acct));
    }

    // amount
    if (in.amountCurrency()!=null || in.amountOriginal()!=null) {
      IFMAmountTypeV3 amt = new IFMAmountTypeV3();
      set(amt::setRFPAmountCurrencyCd, of.createIFMAmountTypeV3RFPAmountCurrencyCd(in.amountCurrency()));
      set(amt::setOriginalAmount, in.amountOriginal()==null ? null : of.createIFMAmountTypeV3OriginalAmount(in.amountOriginal()));
      g.setAmount(of.createTFWSEvaluateGenericV2GenericTypeAmount(amt));
    }

    // baseTransaction
    if (notBlank(in.transactionKey()) || notBlank(in.transactionType()) || in.transactionDateTime()!=null) {
      IFMBaseTransactionTypeV3 base = new IFMBaseTransactionTypeV3();
      set(base::setTransactionKey, of.createIFMBaseTransactionTypeV3TransactionKey(in.transactionKey()));
      set(base::setTransactionType, of.createIFMBaseTransactionTypeV3TransactionType(in.transactionType()));
      // Example of a date field we can populate if you want to keep a timestamp:
      if (in.transactionDateTime()!=null) {
        set(base::setInterbankSettlementDate, of.createIFMBaseTransactionTypeV3InterbankSettlementDate(xgc(in.transactionDateTime())));
      }
      g.setBaseTransaction(of.createTFWSEvaluateGenericV2GenericTypeBaseTransaction(base));
    }

    // partyReference
    if (notBlank(in.partyName()) || notBlank(in.taxId())) {
      IFMPartyReferenceTypeV4 p = new IFMPartyReferenceTypeV4();
      set(p::setName, of.createIFMPartyReferenceTypeV4Name(in.partyName()));
      set(p::setTaxId, of.createIFMPartyReferenceTypeV4TaxId(in.taxId()));
      g.setPartyReference(of.createTFWSEvaluateGenericV2GenericTypePartyReference(p));
    }

    // onlineSession
    if (notBlank(in.ipAddress())) {
      IFMOnlineSessionTypeV4 s = new IFMOnlineSessionTypeV4();
      set(s::setIpAddress, of.createIFMOnlineSessionTypeV4IpAddress(in.ipAddress()));
      g.setOnlineSession(of.createTFWSEvaluateGenericV2GenericTypeOnlineSession(s));
    }

    // userDefined (stash operationKey as JSON)
    IFMUserDefinedComplexTypesV1 ud = new IFMUserDefinedComplexTypesV1();
    set(ud::setDataOfUserDefinedType, of.createIFMUserDefinedComplexTypesV1DataOfUserDefinedType(
        "{\"operationKey\":\"" + in.operationKey() + "\"}"));
    g.setUserDefined(of.createTFWSEvaluateGenericV2GenericTypeUserDefined(ud));

    return g;
  }

  // --------- small helpers to keep code tidy ----------

  @FunctionalInterface
  private interface Setter<T> { void set(T v); }

  private <T> void set(Setter<JAXBElement<T>> setter, JAXBElement<T> value) {
    if (value != null && value.getValue() != null) setter.set(value);
  }

  private boolean notBlank(String s) { return s != null && !s.isBlank(); }

  private XMLGregorianCalendar xgc(OffsetDateTime odt) throws Exception {
    return DatatypeFactory.newInstance()
        .newXMLGregorianCalendar(odt.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));
  }
}

==================
package com.example.eh.service;

import com.example.eh.gen.FFWSEvaluateGenericV22Response;
import jakarta.xml.bind.JAXBElement;
import org.springframework.stereotype.Component;

import javax.xml.transform.Source;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayOutputStream;
import java.nio.charset.StandardCharsets;

@Component
public class SoapResponseReader {
  public String get(JAXBElement<String> el) { return el==null ? null : el.getValue(); }
  public Integer get(JAXBElement<Integer> el) { return el==null ? null : el.getValue(); }
  public Boolean getBool(JAXBElement<Boolean> el) { return el==null ? null : el.getValue(); }

  // If you want to return the raw SOAP body for troubleshooting:
  public String rawBodyIfAvailable(FFWSEvaluateGenericV22Response resp) {
    try {
      // In wsimport flow we don't directly have the SOAPMessage; this is only illustrative.
      // In most cases, you won't need this. Keep null to avoid confusion.
      return null;
    } catch (Exception e) {
      return null;
    }
  }
}


