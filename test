package com.fraud;

import com.github.jknack.handlebars.Handlebars;
import com.github.jknack.handlebars.HandlebarsException;
import com.github.jknack.handlebars.Template;
import com.github.jknack.handlebars.io.ClassPathTemplateLoader;
import com.github.jknack.handlebars.io.TemplateLoader;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.*;

/**
 * Component responsible for loading and processing Handlebars templates.
 * This class handles template loading, helper registration, and sample data creation.
 */
@Component
public class Loader {
    private static final Logger logger = LoggerFactory.getLogger(Loader.class);
    private static final String TEMPLATE_NAME = "fraud";

    private final Handlebars handlebars;

    /**
     * Constructor that initializes the Handlebars engine with the template loader.
     */
    public Loader() {
        // Use ClassPathTemplateLoader to load templates from the classpath
        TemplateLoader loader = new ClassPathTemplateLoader("/template", ".hbs");
        this.handlebars = new Handlebars(loader);
    }

    /**
     * Initializes the template processing after the bean is constructed.
     * Registers helpers, creates a sample context, and applies the template.
     */
    @PostConstruct
    public void initializeTemplate() throws IOException {
        LoadTemplate();
    }

    /**
     * Loads and processes the Handlebars template.
     * This method is used for testing and can be called directly.
     */
    public void LoadTemplate() throws IOException {
        Map<String, Object> model = new HashMap<>();
        model.put("action", "http://example.com/order/PlaceOrder");
        model.put("endpoint", "https://api.example.com/soap/order");
        model.put("customerId", "CIF-12345");
        model.put("expedited", true); // will render as "true"
        model.put("requestedDate", "2025-09-01T10:00:00Z");
        model.put("couponCode", "SAVE10");

        List<Map<String, Object>> items = new ArrayList<>();
        items.add(new HashMap<>(Map.of(
                "sku", "ETH-ON-DEMAND",
                "quantity", 2,
                "unitPrice", "199.99",
                "giftWrap", false
        )));
        items.add(new HashMap<>(Map.of(
                "sku", "IP-VPN",
                "quantity", 1,
                "unitPrice", "499.00",
                "giftWrap", true
        )));
        model.put("items", items);

        // Compile + render

        Template t = handlebars.compile(TEMPLATE_NAME);
        String soapXml = t.apply(model);

        System.out.println(soapXml);
    }


}

