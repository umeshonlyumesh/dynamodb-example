package com.fraud.service;

import com.fraud.client.*;
import jakarta.xml.ws.Holder;
import org.springframework.stereotype.Service;

import java.net.URL;

/**
 * Service class for interacting with the Fraud SOAP web service.
 */
@Service
public class FraudService {

    /**
     * Calls the fraud evaluation SOAP service.
     *
     * @param request The request object containing fraud evaluation data
     * @return The result of the fraud evaluation
     */
    public FraudEvaluationResult evaluateFraud(TFWSEvaluateGenericV2GenericType request) {
        try {
            // Create the service client
            URL wsdlURL = new URL("file:/C:/ai/fraud/src/main/resources/wsdl/fraud.wsdl");
            EventHandlerService service = new EventHandlerService(wsdlURL);
            EHProxy port = service.getEventHandlerServiceHttpPort();

            // Create the request object
            FFWSEvaluateGenericV22GenericTupleType genericTuple = new FFWSEvaluateGenericV22GenericTupleType();
            ObjectFactory factory = new ObjectFactory();
            genericTuple.setGeneric(factory.createFFWSEvaluateGenericV22GenericTupleTypeGeneric(request));

            // Create the holder for the response
            Holder<FFWSEvaluateGenericV22CustomOutTupleType> customOutHolder = 
                new Holder<>();

            // Call the SOAP service
            EHResult result = port.ffWSEvaluateGenericV22(genericTuple, customOutHolder);

            // Create and return the result object
            FraudEvaluationResult evaluationResult = new FraudEvaluationResult();
            if (result.getReturnCode() != null) {
                evaluationResult.setReturnCode(result.getReturnCode().getValue());
            }
            if (result.getMessage() != null) {
                evaluationResult.setMessage(result.getMessage().getValue());
            }
            if (result.getAdditionalData() != null) {
                evaluationResult.setAdditionalData(result.getAdditionalData().getValue());
            }

            // Add custom output data if available
            if (customOutHolder.value != null) {
                if (customOutHolder.value.getActimizeAnalyticsScore() != null) {
                    evaluationResult.setActimizeAnalyticsScore(customOutHolder.value.getActimizeAnalyticsScore().getValue());
                }
                if (customOutHolder.value.getActimizeTransactionScore() != null) {
                    evaluationResult.setActimizeTransactionScore(customOutHolder.value.getActimizeTransactionScore().getValue());
                }
                if (customOutHolder.value.getIsAlertGenerated() != null) {
                    evaluationResult.setIsAlertGenerated(customOutHolder.value.getIsAlertGenerated().getValue());
                }
                if (customOutHolder.value.getModelScoreCd() != null) {
                    evaluationResult.setModelScoreCd(customOutHolder.value.getModelScoreCd().getValue());
                }
                if (customOutHolder.value.getOperationKey() != null) {
                    evaluationResult.setOperationKey(customOutHolder.value.getOperationKey().getValue());
                }
                if (customOutHolder.value.getTransactionKey() != null) {
                    evaluationResult.setTransactionKey(customOutHolder.value.getTransactionKey().getValue());
                }
                if (customOutHolder.value.getUserAnalyticsScore() != null) {
                    evaluationResult.setUserAnalyticsScore(customOutHolder.value.getUserAnalyticsScore().getValue());
                }
            }

            return evaluationResult;
        } catch (Exception e) {
            throw new RuntimeException("Error calling fraud evaluation service", e);
        }
    }
}
