import javax.net.ssl.*;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import jakarta.xml.ws.BindingProvider;
import java.util.Map;

private static SSLContext trustAllSslContext() throws Exception {
    TrustManager[] trustAll = new TrustManager[] {
        new X509TrustManager() {
            public void checkClientTrusted(X509Certificate[] x, String a) {}
            public void checkServerTrusted(X509Certificate[] x, String a) {}
            public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }
        }
    };
    SSLContext sc = SSLContext.getInstance("TLS");
    sc.init(null, trustAll, new SecureRandom());
    return sc;
}

private static HostnameVerifier allowAllHosts() {
    return (hostname, session) -> true;
}

public EHResult callIFMXService(FFWSEvaluateGenericV2V2GenerateTupleType request) throws Exception {

    EHProxy obj = callService();                         // your generated port
    BindingProvider bp = (BindingProvider) obj;
    Map<String,Object> ctx = bp.getRequestContext();

    // keep your HTTPS endpoint
    ctx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, trustEndPoint);

    if (isMTLSEnabled) {
        // ... your existing mTLS setup ...
    } else {
        // *** HTTPS with SSL validation DISABLED (no mTLS, trust all) ***
        SSLContext sc = trustAllSslContext();
        // remove any previous custom SSL first
        ctx.remove("com.sun.xml.ws.transport.https.client.SSLSocketFactory");
        ctx.remove("com.sun.xml.ws.transport.https.client.hostname.verifier");
        // inject trust-all SSL + hostname verifier
        ctx.put("com.sun.xml.ws.transport.https.client.SSLSocketFactory", sc.getSocketFactory());
        ctx.put("com.sun.xml.ws.transport.https.client.hostname.verifier", allowAllHosts());

        // optional timeouts (set both RI key variants to be safe)
        ctx.put("com.sun.xml.ws.connect.timeout",   timeOut);
        ctx.put("com.sun.xml.ws.request.timeout",   timeOut);
        ctx.put("com.sun.xml.internal.ws.connect.timeout", timeOut);
        ctx.put("com.sun.xml.internal.ws.request.timeout", timeOut);
    }

    // call
    jakarta.xml.ws.Holder<FFWSEvaluateGenericV2V2CustomOutputType> customOut = new jakarta.xml.ws.Holder<>();
    return obj.ffwsEvaluateGenericV2V2(request, customOut);
}
